@{
    ViewBag.Title = "Home";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-4">
    <!-- Search Bar -->
    <div class="row mb-4">
        <div class="col-12">
            <input type="text" id="searchInput" class="form-control" placeholder="Search foods...">
            <div id="searchResults" class="mt-2 d-none">
                <div class="list-group" id="searchResultsList"></div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="row">
        <!-- Left Side -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h3 id="userName" class="mb-4">Loading...</h3>
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" id="calendarBtn">
                            <i class="fas fa-calendar"></i> Calendar
                        </button>
                        <button class="btn btn-danger" id="signOutButton">
                            <i class="fas fa-sign-out-alt"></i> Sign Out
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Side -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-body text-center">
                    <div class="progress-circle-container mb-4">
                        <div class="position-relative" style="width: 200px; height: 200px; margin: 0 auto;">
                            <canvas id="progressCircle" width="200" height="200"></canvas>
                            <div class="position-absolute top-50 start-50 translate-middle">
                                <h3 id="calorieCount">0/0</h3>
                            </div>
                        </div>
                    </div>

                    <h4 class="mb-3">Today's Foods</h4>
                    <div id="foodList" class="list-group text-start">
                        <!-- Food items will be added here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Portion Modal -->
<div class="modal fade" id="portionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Enter Portion Size</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Portion (grams):</label>
                    <input type="number" class="form-control" id="portionSize" min="1">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="addFoodBtn">Add Food</button>
            </div>
        </div>
    </div>
</div>

<!-- Food Info Modal -->
<div class="modal fade" id="foodInfoModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Food Information</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="foodInfoContent">
                <!-- Food details will be added here -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-firestore.js"></script>
    <script src="https://kit.fontawesome.com/your-font-awesome-kit.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        // Firebase initialization
        const firebaseConfig = {
            apiKey: "AIzaSyBZdN7AuMkwZFSFwKWLy6QzVCx8vGMuK68",
            authDomain: "fitformula-27ac5.firebaseapp.com",
            projectId: "fitformula-27ac5",
            storageBucket: "fitformula-27ac5.firebasestorage.app",
            messagingSenderId: "511504403783",
            appId: "1:511504403783:web:b68aceed008d0627195062",
            measurementId: "G-LWXSJJKPQ9"
        };

        if (!firebase.apps.length) {
            firebase.initializeApp(firebaseConfig);
        }

        const db = firebase.firestore();
        let currentUser = null;
        let selectedFood = null;
        let calorieGoal = 0;
        let currentCalories = 0;

        // Progress Circle Setup
        const ctx = document.getElementById('progressCircle').getContext('2d');
        const progressCircle = new Chart(ctx, {
            type: 'doughnut',
            data: {
                datasets: [{
                    data: [0, 100],
                    backgroundColor: ['#007bff', '#e9ecef']
                }]
            },
            options: {
                cutout: '80%',
                responsive: true,
                maintainAspectRatio: false,
                animation: false
            }
        });

        // Load user data
        firebase.auth().onAuthStateChanged(async (user) => {
            if (user) {
                currentUser = user;
                const userDoc = await db.collection('users').doc(user.uid).get();
                const userData = userDoc.data();

                document.getElementById('userName').textContent = userData.username;
                calorieGoal = userData.calorieGoal;
                updateCalorieDisplay();
                loadTodaysFoods();
            } else {
                window.location.href = '@Url.Action("Login", "Auth")';
            }
        });

        // Search functionality
        let searchTimeout;
        document.getElementById('searchInput').addEventListener('input', (e) => {
            clearTimeout(searchTimeout);
            const searchTerm = e.target.value.trim();

            if (searchTerm.length < 3) {
                document.getElementById('searchResults').classList.add('d-none');
                return;
            }

            searchTimeout = setTimeout(() => {
                searchFoods(searchTerm);
            }, 500);
        });

        async function searchFoods(term) {
            const searchResults = document.getElementById('searchResults');
            const searchResultsList = document.getElementById('searchResultsList');
            searchResultsList.innerHTML = '<div class="text-center"><div class="spinner-border"></div></div>';
            searchResults.classList.remove('d-none');

            try {
                const response = await fetch(`https://world.openfoodfacts.org/cgi/search.pl?search_terms=${encodeURIComponent(term)}&json=1`, {
                    headers: {
                        'User-Agent': 'FitFormula - Web - Version 1.0'
                    }
                });
                const data = await response.json();

                searchResultsList.innerHTML = '';
                data.products.slice(0, 5).forEach(product => {
                    const calories = product.nutriments['energy-kcal_100g'] || 0;
                    const imageUrl = product.image_url || '/path/to/default/image.jpg';

                    const item = document.createElement('div');
                    item.className = 'list-group-item d-flex justify-content-between align-items-center';
                    item.innerHTML = `
                        <img src="${imageUrl}" alt="${product.product_name}" style="width: 50px; height: 50px; object-fit: cover;">
                        <div class="ms-3 me-auto">
                            <div class="fw-bold">${product.product_name}</div>
                            <small>${calories} kcal/100g</small>
                        </div>
                        <div class="btn-group">
                            <button class="btn btn-success btn-sm add-food" data-product='${JSON.stringify(product)}'>
                                <i class="fas fa-plus"></i>
                            </button>
                            <button class="btn btn-info btn-sm info-food" data-product='${JSON.stringify(product)}'>
                                <i class="fas fa-info"></i>
                            </button>
                        </div>
                    `;
                    searchResultsList.appendChild(item);
                });

                // Add event listeners
                document.querySelectorAll('.add-food').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        selectedFood = JSON.parse(e.currentTarget.dataset.product);
                        new bootstrap.Modal(document.getElementById('portionModal')).show();
                    });
                });

                document.querySelectorAll('.info-food').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        const product = JSON.parse(e.currentTarget.dataset.product);
                        showFoodInfo(product);
                    });
                });
            } catch (error) {
                searchResultsList.innerHTML = '<div class="alert alert-danger">Error searching foods</div>';
            }
        }

        // Add food functionality
        document.getElementById('addFoodBtn').addEventListener('click', async () => {
            const portionSize = document.getElementById('portionSize').value;
            if (!portionSize || portionSize <= 0) {
                alert('Please enter a valid portion size');
                return;
            }

            const calories = (selectedFood.nutriments['energy-kcal_100g'] || 0) * (portionSize / 100);
            const foodData = {
                name: selectedFood.product_name,
                calories: Math.round(calories),
                portion: portionSize,
                timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                date: new Date().toISOString().split('T')[0]
            };

            try {
                await db.collection('users').doc(currentUser.uid)
                    .collection('foods').add(foodData);

                bootstrap.Modal.getInstance(document.getElementById('portionModal')).hide();
                document.getElementById('portionSize').value = '';
                document.getElementById('searchInput').value = '';
                document.getElementById('searchResults').classList.add('d-none');
                loadTodaysFoods();
            } catch (error) {
                alert('Error adding food');
            }
        });

        // Show food info
        function showFoodInfo(product) {
            const content = document.getElementById('foodInfoContent');
            content.innerHTML = `
                <div class="text-center mb-3">
                    <img src="${product.image_url || '/path/to/default/image.jpg'}"
                         alt="${product.product_name}"
                         style="max-width: 200px;">
                </div>
                <h4>${product.product_name}</h4>
                <p>Per 100g:</p>
                <ul class="list-group">
                    <li class="list-group-item">Calories: ${product.nutriments['energy-kcal_100g'] || 0} kcal</li>
                    <li class="list-group-item">Protein: ${product.nutriments.proteins_100g || 0}g</li>
                    <li class="list-group-item">Carbohydrates: ${product.nutriments.carbohydrates_100g || 0}g</li>
                    <li class="list-group-item">Fat: ${product.nutriments.fat_100g || 0}g</li>
                </ul>
            `;
            new bootstrap.Modal(document.getElementById('foodInfoModal')).show();
        }

        // Load today's foods
        async function loadTodaysFoods() {
            const today = new Date().toISOString().split('T')[0];
            const foodList = document.getElementById('foodList');
            foodList.innerHTML = '';
            currentCalories = 0;

            const snapshot = await db.collection('users').doc(currentUser.uid)
                .collection('foods')
                .where('date', '==', today)
                .orderBy('timestamp', 'desc')
                .get();

            snapshot.forEach(doc => {
                const food = doc.data();
                currentCalories += food.calories;

                const item = document.createElement('div');
                item.className = 'list-group-item d-flex justify-content-between align-items-center';
                item.innerHTML = `
                    <div>
                        <h6 class="mb-0">${food.name}</h6>
                        <small>${food.portion}g</small>
                    </div>
                    <span class="badge bg-primary rounded-pill">${food.calories} kcal</span>
                `;
                foodList.appendChild(item);
            });

            updateCalorieDisplay();
        }

        // Update calorie display and progress
        function updateCalorieDisplay() {
            document.getElementById('calorieCount').textContent = `${Math.round(currentCalories)}/${calorieGoal}`;
            const percentage = (currentCalories / calorieGoal) * 100;
            progressCircle.data.datasets[0].data = [percentage, Math.max(0, 100 - percentage)];
            progressCircle.update();
        }

        // Sign out
        document.getElementById('signOutButton').addEventListener('click', () => {
            firebase.auth().signOut().then(() => {
                window.location.href = '@Url.Action("Login", "Auth")';
            });
        });
    </script>
}